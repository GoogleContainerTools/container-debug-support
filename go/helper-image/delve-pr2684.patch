This patch corresponds to PR 2684 that causes Delve to warn when
debugging programs built with an unsupported Go version.  This patch
drops the documentation changes as they did not apply cleanly to 1.7.2.

https://github.com/go-delve/delve/pull/2684
https://github.com/go-delve/delve/commit/efc44831754e5e66b66ec7375a3ca424426310ad


commit efc44831754e5e66b66ec7375a3ca424426310ad
Author: polinasok <51177946+polinasok@users.noreply.github.com>
Date:   Sat Sep 25 08:41:00 2021 -0700

    pkg/goversion: visibly warn the user with --check-go-version=false (#2684)
    
    
    Co-authored-by: Polina Sokolova <polinasok@users.noreply.github.com>

diff --git pkg/goversion/compat.go pkg/goversion/compat.go
index b19528eb..053ae138 100644
--- pkg/goversion/compat.go
+++ pkg/goversion/compat.go
@@ -2,6 +2,8 @@ package goversion
 
 import (
 	"fmt"
+
+	"github.com/go-delve/delve/pkg/logflags"
 )
 
 var (
@@ -9,22 +11,33 @@ var (
 	MinSupportedVersionOfGoMinor = 15
 	MaxSupportedVersionOfGoMajor = 1
 	MaxSupportedVersionOfGoMinor = 17
-	goTooOldErr                  = fmt.Errorf("Version of Go is too old for this version of Delve (minimum supported version %d.%d, suppress this error with --check-go-version=false)", MinSupportedVersionOfGoMajor, MinSupportedVersionOfGoMinor)
-	dlvTooOldErr                 = fmt.Errorf("Version of Delve is too old for this version of Go (maximum supported version %d.%d, suppress this error with --check-go-version=false)", MaxSupportedVersionOfGoMajor, MaxSupportedVersionOfGoMinor)
+	goTooOldErr                  = fmt.Sprintf("Go version %%s is too old for this version of Delve (minimum supported version %d.%d, suppress this error with --check-go-version=false)", MinSupportedVersionOfGoMajor, MinSupportedVersionOfGoMinor)
+	goTooOldWarn                 = fmt.Sprintf("WARNING: undefined behavior - Go version %%s is too old for this version of Delve (minimum supported version %d.%d)", MinSupportedVersionOfGoMajor, MinSupportedVersionOfGoMinor)
+	dlvTooOldErr                 = fmt.Sprintf("Version of Delve is too old for Go version %%s (maximum supported version %d.%d, suppress this error with --check-go-version=false)", MaxSupportedVersionOfGoMajor, MaxSupportedVersionOfGoMinor)
+	dlvTooOldWarn                = fmt.Sprintf("WARNING: undefined behavior - version of Delve is too old for Go version %%s (maximum supported version %d.%d)", MaxSupportedVersionOfGoMajor, MaxSupportedVersionOfGoMinor)
 )
 
 // Compatible checks that the version specified in the producer string is compatible with
 // this version of delve.
-func Compatible(producer string) error {
+func Compatible(producer string, warnonly bool) error {
 	ver := ParseProducer(producer)
 	if ver.IsDevel() {
 		return nil
 	}
+	verstr := fmt.Sprintf("%d.%d.%d", ver.Major, ver.Minor, ver.Rev)
 	if !ver.AfterOrEqual(GoVersion{MinSupportedVersionOfGoMajor, MinSupportedVersionOfGoMinor, -1, 0, 0, ""}) {
-		return goTooOldErr
+		if warnonly {
+			logflags.WriteError(fmt.Sprintf(goTooOldWarn, verstr))
+			return nil
+		}
+		return fmt.Errorf(goTooOldErr, verstr)
 	}
 	if ver.AfterOrEqual(GoVersion{MaxSupportedVersionOfGoMajor, MaxSupportedVersionOfGoMinor + 1, -1, 0, 0, ""}) {
-		return dlvTooOldErr
+		if warnonly {
+			logflags.WriteError(fmt.Sprintf(dlvTooOldWarn, verstr))
+			return nil
+		}
+		return fmt.Errorf(dlvTooOldErr, verstr)
 	}
 	return nil
 }
diff --git pkg/logflags/logflags.go pkg/logflags/logflags.go
index 756e7ae6..db34e502 100644
--- pkg/logflags/logflags.go
+++ pkg/logflags/logflags.go
@@ -136,6 +136,14 @@ func writeListeningMessage(server, addr string) {
 	}
 }
 
+func WriteError(msg string) {
+	if logOut != nil {
+		fmt.Fprintln(logOut, msg)
+	} else {
+		fmt.Fprintln(os.Stderr, msg)
+	}
+}
+
 var errLogstrWithoutLog = errors.New("--log-output specified without --log")
 
 // Setup sets debugger flags based on the contents of logstr.
diff --git service/debugger/debugger.go service/debugger/debugger.go
index bb74c9ac..400fdcdd 100644
--- service/debugger/debugger.go
+++ service/debugger/debugger.go
@@ -223,9 +223,6 @@ func (d *Debugger) canRestart() bool {
 }
 
 func (d *Debugger) checkGoVersion() error {
-	if !d.config.CheckGoVersion {
-		return nil
-	}
 	if d.isRecording() {
 		// do not do anything if we are still recording
 		return nil
@@ -234,7 +231,7 @@ func (d *Debugger) checkGoVersion() error {
 	if producer == "" {
 		return nil
 	}
-	return goversion.Compatible(producer)
+	return goversion.Compatible(producer, !d.config.CheckGoVersion)
 }
 
 func (d *Debugger) TargetGoVersion() string {
