plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.sherter.google-java-format' version '0.7.1'

    // Error-prone checker
    id 'net.ltgt.apt' version '0.18'
    id 'net.ltgt.errorprone' version '0.0.16'
}

group 'com.google.cloud.tools'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    // Make sure these are consistent with skaffold-maven-plugin and skaffold-gradle-plugin.
    compile 'com.google.guava:guava:26.0-jre'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.21.0'

    // NullAway errorprone plugin
    annotationProcessor 'com.uber.nullaway:nullaway:0.5.2'
    errorprone 'com.google.errorprone:error_prone_core:2.3.1'
}

wrapper {
    gradleVersion = '4.9'
}

// Integration tests must be run explicitly
task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}
integrationTest.dependsOn test

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

// Adds NullAway errorprone checks.
tasks.withType(JavaCompile) {
    if (!name.toLowerCase().contains('test')) {
        options.compilerArgs += ['-Xep:NullAway:ERROR', '-XepOpt:NullAway:AnnotatedPackages=com.google.cloud.tools']
    }
}

tasks.withType(Test) {
    reports.html.setDestination file("${reporting.baseDir}/${name}")
}

/* GOOGLE JAVA FORMAT */
googleJavaFormat {
    toolVersion = '1.6'
}
check.dependsOn verifyGoogleJavaFormat
/* GOOGLE JAVA FORMAT */

/* CHECKSTYLE */
checkstyle {
    toolVersion = '8.11'

    // get the google_checks.xml file from the checkstyle jar and take out the java checks
    def googleChecks = resources.text.fromArchiveEntry(configurations.checkstyle[0], 'google_checks.xml').asString()
    def fileExtensionsBefore = '<property name="fileExtensions" value="java, properties, xml"/>'
    def fileExtensionsAfter = '<property name="fileExtensions" value="properties, xml"/>'
    def googleChecksNoJava = googleChecks.replace(fileExtensionsBefore, fileExtensionsAfter)
    assert !googleChecks.equals(googleChecksNoJava)

    config = resources.text.fromString(googleChecksNoJava)

    maxErrors = 0
    maxWarnings = 0
}
/* CHECKSTYLE */
